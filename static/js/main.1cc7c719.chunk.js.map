{"version":3,"sources":["features/navbar/Navbar.js","features/chat/chatSlice.js","features/chat/chat-list/ChatList.js","features/chat/chat-window/ChatWindow.js","App.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["Navbar","className","alt","src","width","POKEMONS","getPokemonReply","pokemonId","chatSlice","createSlice","name","initialState","history","user","id","username","isOnline","messages","currentChatId","reducers","setCurrentChat","state","action","payload","currentChat","find","chat","postMessage","message","from","to","push","actions","selectChats","chats","selectCurrentChat","ChatList","useSelector","selectedChat","dispatch","useDispatch","map","key","onClick","toLowerCase","ChatWindow","i","text","placeholder","rows","cols","onKeyUp","e","target","value","getState","date","Date","now","setTimeout","reply","sendMessage","App","counterSlice","increment","decrement","incrementByAmount","configureStore","reducer","counter","counterReducer","chatReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1cc7c719.chunk.js","sourcesContent":["import React from \"react\";\nimport './Navbar.scss';\n\nfunction Navbar() {\n    return (\n        <div className=\"Navbar\">\n            <img alt=\"logo\" src=\"pokeball.png\" width=\"48px\"/>\n            <span className=\"title\">Pok√©Messenger</span>\n        </div>\n    );\n}\n\nexport default Navbar;","import {createSlice} from '@reduxjs/toolkit';\n\nconst POKEMONS = {\n    PIKACHU: 25,\n    JIGGLYPUFF: 39,\n    ROWLET: 722,\n}\n\nfunction getPokemonReply(pokemonId) {\n    switch (pokemonId) {\n        case POKEMONS.PIKACHU:\n            return 'Pika pi!'\n        case POKEMONS.JIGGLYPUFF:\n            return '*sings*: Jigglypuuuuff';\n        case POKEMONS.ROWLET:\n            return '*tweet*';\n        default:\n            return 'Do I know you?';\n    }\n}\n\nexport const chatSlice = createSlice({\n    name: 'chatList',\n    initialState: {\n        history: [\n            {user: {id: POKEMONS.PIKACHU, username: 'Pikachu', isOnline: true}, messages: []},\n            {user: {id: POKEMONS.JIGGLYPUFF, username: 'Jigglypuff', isOnline: false}, messages: []},\n            {user: {id: POKEMONS.ROWLET, username: 'Rowlet', isOnline: true}, messages: []},\n        ],\n        currentChatId: null,\n    },\n    reducers: {\n        // This is invoked to change the active chat window\n        setCurrentChat: (state, action) => {\n            state.currentChatId = action.payload;\n            state.currentChat = state.history.find(chat => chat.user.id === action.payload);\n        },\n        // This is invoked if the user or a Pokemon posts a message\n        postMessage: (state, action) => {\n            const message = action.payload;\n            // The message has to field if it is from the user, from field if it is from a Pokemon\n            const user = message.from ? message.from : message.to;\n\n            const currentChat = state.history.find(chat => chat.user.id === user);\n            currentChat.messages.push(message);\n\n            // Need to reassign currentChat to update it with latest messages\n            state.currentChat = currentChat;\n        }\n    }\n});\n\n// This is invoked when the user wants to send a message to a Pokemon\nexport const sendMessage = message => (dispatch, getState) => {\n    const state = getState();\n    const pokemonId = message.to;\n    const chat = state.chats.history.find(chat => chat.user.id === pokemonId);\n\n    message.date = Date.now();\n    dispatch(postMessage(message));\n\n    // Send Pokemon's reply with some delay\n    if (chat.user.isOnline) { // Pokemon should reply only if it is online now\n        setTimeout(() => {\n            const reply = {from: pokemonId, to: 0, text: getPokemonReply(pokemonId), date: Date.now()};\n            dispatch(postMessage(reply));\n        }, 1000);\n    }\n};\n\nexport const {setCurrentChat, postMessage} = chatSlice.actions;\n\nexport const selectChats = state => state.chats.history;\nexport const selectCurrentChat = state => state.chats.currentChat;\n\nexport default chatSlice.reducer;\n","import React from \"react\";\nimport './ChatList.scss';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectChats, selectCurrentChat, setCurrentChat} from \"../chatSlice\";\n\nfunction ChatList() {\n    const chats = useSelector(selectChats);\n    const selectedChat = useSelector(selectCurrentChat);\n    const dispatch = useDispatch();\n\n    return (\n        <div className=\"ChatList\">\n            <ul>\n                {chats.map(chat => (\n                    <li key={chat.user.id}\n                        className={selectedChat && selectedChat.user.id === chat.user.id ? 'selected' : ''}\n                        onClick={() => dispatch(setCurrentChat(chat.user.id))}>\n                        <div className=\"circular-container\">\n                            <img src={'avatars/' + chat.user.username.toLowerCase() + '.png'} alt=\"avatar\"/>\n                        </div>\n                        <span className=\"username\">{chat.user.username}</span>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n}\n\nexport default ChatList;","import './ChatWindow.scss';\nimport React from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {selectCurrentChat, sendMessage} from \"../chatSlice\";\n\n\nfunction ChatWindow() {\n    const currentChat = useSelector(selectCurrentChat);\n    const dispatch = useDispatch();\n\n    const onKeyUp = e => {\n        if (e.key === 'Enter') {\n            const message = {from: 0, to: currentChat.user.id, text: e.target.value};\n            dispatch(sendMessage(message));\n            e.target.value = '';\n        }\n    };\n\n    return (\n        <div className=\"ChatWindow\">\n            {currentChat && (\n                <>\n                    <div className=\"header\">\n                        <span className={currentChat.user.isOnline ? 'dot online' : 'dot'}></span>\n                        <span className=\"username\">{currentChat.user.username}</span>\n                    </div>\n                    <hr/>\n                    <ul>\n                        {currentChat.messages.map((message, i) => (\n                            <li key={i} className={message.from !== 0 ? 'left' : ''}>\n                                <div className=\"message\">\n                                    {message.text}\n                                </div>\n                            </li>\n                        ))}\n                    </ul>\n                    <div className=\"message-input\">\n                        <textarea placeholder=\"Send a message\" name=\"message\" rows=\"4\" cols=\"50\"\n                                  onKeyUp={onKeyUp}></textarea>\n                        <p className=\"hint\">Press Enter to send!</p>\n                    </div>\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default ChatWindow;","import React from 'react';\r\nimport './App.scss';\r\nimport Navbar from \"./features/navbar/Navbar\";\r\nimport ChatList from \"./features/chat/chat-list/ChatList\";\r\nimport ChatWindow from \"./features/chat/chat-window/ChatWindow\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <header>\r\n                <Navbar/>\r\n            </header>\r\n            <div className=\"App-content\">\r\n                <ChatList/>\r\n                <ChatWindow/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    value: 0,\r\n  },\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = amount => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCount = state => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport counterReducer from '../features/counter/counterSlice';\r\nimport chatReducer from \"../features/chat/chatSlice\";\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        counter: counterReducer,\r\n        chats: chatReducer,\r\n    },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}